// Insert your header information here
// TreeCalc.cpp:  CS 2150 Tree Calculator method implementations

#include "TreeCalc.h"
#include <stack>
#include <string>
#include <iostream>
#include <cstdlib>

using namespace std;

//Constructor
TreeCalc::TreeCalc() {
}

//Destructor- frees memory
TreeCalc::~TreeCalc() {
  while(mystack.size() > 0){
    cleanTree(mystack.top());
    mystack.pop();
  }
}

//Deletes tree/frees memory
void TreeCalc::cleanTree(TreeNode* ptr) {
  if (ptr->left != NULL){
    cleanTree(ptr->left);
    delete ptr->left;
  }
  if (ptr->right != NULL){
    cleanTree(ptr->right);
    delete ptr->right;
  }
}

//Gets data from user
void TreeCalc::readInput() {
  string response;
  cout << "Enter elements one by one in postfix notation" << endl
       << "Any non-numeric or non-operator character,"
       << " e.g. #, will terminate input" << endl;
  cout << "Enter first element: ";
  cin >> response;
  //while input is legal
  while (isdigit(response[0]) || response[0]=='/' || response[0]=='*'
	 || response[0]=='-' || response[0]=='+' ) {
    insert(response);
    cout << "Enter next element: ";
    cin >> response;
  }
}

//Puts value in tree stack
void TreeCalc::insert(const string& val) {
  // insert a value into the tree
  if(val == "+" || val == "-" || val == "*" || val == "/"){
    TreeNode *in = new TreeNode(val);
    TreeNode *a = mystack.top();
    mystack.pop();
    TreeNode *b = mystack.top();
    mystack.pop();
    in->left = b;
    in->right = a;
    mystack.push(in);
  }
  else{
    TreeNode *in = new TreeNode(val);
    mystack.push(in);
  }
}

//Prints data in prefix form
void TreeCalc::printPrefix(TreeNode* ptr) const {
  // print the tree in prefix format
  if (ptr->left == NULL)
    cout << ptr->value << " ";
  else{
    cout << ptr->value << " ";
    printPrefix(ptr->left);
    printPrefix(ptr->right);
  }
}

//Prints data in infix form
void TreeCalc::printInfix(TreeNode* ptr) const {
  // print tree in infix format with appropriate parentheses
  if (ptr->left == NULL)
    cout << ptr->value;
  else{
    cout << "(";
    printInfix(ptr->left);
    cout << " " << ptr->value << " ";
    printInfix(ptr->right);
    cout << ")";
  }
}

//Prints data in postfix form
void TreeCalc::printPostfix(TreeNode* ptr) const {
  // print the tree in postfix form
  if (ptr->left == NULL)
    cout << ptr->value << " ";
  else{
    printPostfix(ptr->left);
    printPostfix(ptr->right);
    cout << ptr->value << " ";
  }
}

// Prints tree in all 3 (pre,in,post) forms

void TreeCalc::printOutput() const {
  if (mystack.size()!=0 && mystack.top()!=NULL) {
    cout << "Expression tree in postfix expression: ";
    printPostfix(mystack.top());
    cout << endl;
    cout << "Expression tree in infix expression: ";
    printInfix(mystack.top());
    cout << endl;
    cout << "Expression tree in prefix expression: ";
    printPrefix(mystack.top());
    cout << endl;
  } else
    cout<< "Size is 0." << endl;
}

//Evaluates tree, returns value
// private calculate() method
int TreeCalc::calculate(TreeNode* ptr) const {
  // Traverse the tree and calculates the result
  if (ptr->value == "+"){
    return calculate(ptr->left) + calculate(ptr->right);
  }
  if (ptr->value == "-"){
    return calculate(ptr->left) - calculate(ptr->right);
  }
  if (ptr->value == "/"){
    return calculate(ptr->left) / calculate(ptr->right);
  }
  if (ptr->value == "*"){
    return calculate(ptr->left) * calculate(ptr->right);
  }
  return atoi(ptr->value.c_str());
}

//Calls calculate, sets the stack back to a blank stack
// public calculate() method. Hides private data from user
int TreeCalc::calculate() {
  int i = 0;
  // call private calculate method here
  i = calculate(mystack.top());
  while(mystack.size() > 0){
    cleanTree(mystack.top());
    mystack.pop();
  }
  return i;
}

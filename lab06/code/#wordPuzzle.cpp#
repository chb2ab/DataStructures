//Crispin Bernier, chb2ab, 104
//Time taken for 3x3 word search: 0.000160, 4x7: 0.000641, 5x8: 0.000800, 50x50: 0.404, 140x70: 4.69, 250x250: 101.2, 300x300: 195.3
//The big-theta running time for this application is Big-Theta(r,c,w) = r*c*max(r,c)*w, where w is the size of the dictionary. This was obtained by multiplying the running times for the nested for loops and the hashtable search. The nested for loops are of length r, c, 8, and max(r,c), and searching a hashtable using a linked list seperate chaining collision resolution strategy is big-theta of n. Because 8 is simply a constant, the running time becomes r*c*max(r,c)*w where w is the number of words in the hashtable.

#include <iostream>
#include <fstream>
#include <string>
#include <stdlib.h>
#include <assert.h>
#include <sstream>

#include "hashTable.h"
#include "timer.h"
using namespace std;

bool readInTable (string filename, int &rows, int &cols);
char* getWordInTable (int startRow, int startCol, int dir, int len,
                      int numRows, int numCols);
char table[500][500];

int main(int argc, char* argv[])
{
  //Get grid
  int rows, cols;
  bool result = readInTable (argv[2], rows, cols);
  if ( !result ) {
    cout << "Error reading in file!" << endl;
    exit(1);
  }
  //Get Dictionary
  string inFile = argv[1];
  string word;
  int n=0;
  int num_words=0;
  ifstream fin(inFile.c_str());
  if (!fin) {
    cerr <<"Cannot open " << inFile << endl;
    exit(1);
  }
  while (fin >> word) {
    n = int (word.size());
    assert(n > 0);

    if (!isalpha(word[n - 1])) {	// eliminate trailing punctuation
      word = word.substr(0, n-1);
    }

    if (word.size() > 2)
      num_words++;
  }

  hashTable hash(0.5, num_words);
  ifstream fin2(inFile.c_str());

  while (fin2 >> word) {
    n = int (word.size());
    assert(n > 0);
    if (word.size() > 2)
      hash.insert(word);
  }
  // Get a word (of length 10), starting at position (2,2) in the
  // array, in each of the 8 directions
  int ma = max(rows, cols);
  string prev = "";
  timer t;
  int findcount = 0;
  list< string > storage;
  string in = "";
  t.start();
  for ( int a = 0; a < rows; a++ ){		//iterate r times
    for ( int b = 0; b < cols; b++){		//iterate c times
      for ( int c = 0; c < 8; c++ ){		//iterate 8 times
	for ( int d = 1; d < ma+1; d++ ){	//iterate max of (r,c) times
	  string str = getWordInTable(a,b,c,d,rows,cols);
	  if (str != prev){
	    if (hash.search(str)){ 		//searching hashtbale of w words is big-theta(w)=w
	      findcount++;
	      if (c == 0)
		in += "N ";
	      if (c == 1)
		in += "NE ";
	      if (c == 2)
		in += "E ";
	      if (c == 3)
		in += "SE ";
	      if (c == 4)
		in += "S ";
	      if (c == 5)
		in += "SW ";
	      if (c == 6)
		in += "W ";
	      if (c == 7)
		in += "NW ";
	      in +="(";
              string aa = static_cast<ostringstream*>( &(ostringstream() << a) )->str();
              in += aa;
              in += ", ";
              string bb = static_cast<ostringstream*>( &(ostringstream() << b) )->str();
              in += bb;
              in += "): ";
              in += str;
              storage.push_front(in);
              in = "";
	    }
	  }
	  prev = str;
	}
      }
    }
  }
  t.stop();
  list< string >::const_iterator iterator;
    for (iterator = storage.begin(); iterator != storage.end(); ++iterator) {
      cout << *iterator << endl;
    }
  cout << findcount << " words found" << endl;
  cout << "Found all words in " << t << " seconds" << endl;
  int time = t.getTime()*1000;
  cout << time << endl;
  return 0;
}




/** This function will read in a grid file, as per the format in the
 * CS 2150 lab 6 document, into a global table[][] array.  It uses C++
 * file streams, and thus requires the the <fstream> #include header.
 *
 * @return true or false, depending on whether the file was
 *         successfully opened.
 * @param filename The file name to read in -- it's assumed to be in
 *                 the file format described in the lab document.
 * @param rows The number of rows as specified in the input file;
 *             as this is a reference, it is set by the function.
 * @param cols The number of columnss as specified in the input file;
 *             as this is a reference, it is set by the function.
 */
bool readInTable (string filename, int &rows, int &cols) {
  // a C++ string to hold the line of data that is read in
  string line;
  // set up the file stream to read in the file (takes in a C-style
  // char* string, not a C++ string object)
  ifstream file(filename.c_str());
  // upon an error, return false
  if ( !file.is_open() )
    return false;
  // the first line is the number of rows: read it in
  file >> rows;
  getline (file,line); // eats up the return at the end of the line
  // the second line is the number of cols: read it in and parse it
  file >> cols;
  getline (file,line); // eats up the return at the end of the line
  // the third and last line is the data: read it in
  getline (file,line);
  // close the file
  file.close();
  // convert the string read in to the 2-D grid format into the
  // table[][] array.  In the process, we'll print the table to the
  // screen as well.
  int pos = 0; // the current position in the input data
  for ( int r = 0; r < rows; r++ ) {
    for ( int c = 0; c < cols; c++ ) {
      table[r][c] = line[pos++];
    }
  }
  // return success!
  return true;
}



/** This function will retrieve a word in a grid of letters in a given
 * direction.  If the end of the grid is encountered before the length
 * of the desired string is reached, then a shorter string will be
 * returned.  The data is retrieved from a global char table[][]
 * array, which is assumed to be defined (and in scope).  NOTE: The
 * return value is a static char[][] variable (for efficiency
 * reasons), so a successive return value will overwrite a previous
 * return value.
 *
 * @return A char* containing the letters in the provided direction
 *         (NOTE: it is returned in a static char array).
 * @param startRow The starting (row,col) position to find the word.
 * @param startCol The starting (row,col) position to find the word.
 * @param dir The direction to move: 0 is north (upwards), 1 is
 *            northeast, and it rotates around clockwise until it
 *            reaches 7 for northwest.
 * @param len The length of the string to return (assuming the edge of
 *            the grid is not reached).
 * @param numRows The number of rows in the global char table[][]
 *                array .
 * @param numCols The number of columns in the global char table[][]
 *                array.
 */
char* getWordInTable (int startRow, int startCol, int dir, int len,
                      int numRows, int numCols) {
  // the static-ness of this variable prevents it from being
  // re-declared upon each function invocataion.  It also prevents it
  // from being deallocated between invocations.  It's probably not
  // good programming practice, but it's an efficient means to return
  // a value.
  static char output[256];
  // make sure the length is not greater than the array size.
  if ( len >= 255 )
    len = 255;
  // the position in the output array, the current row, and the
  // current column
  int pos = 0, r = startRow, c = startCol;
  // iterate once for each character in the output
  for ( int i = 0; i < len; i++ ) {
    // if the current row or column is out of bounds, then break
    if ( (c >= numCols) || (r >= numRows) || (r < 0) || (c < 0) )
      break;
    // set the next character in the output array to the next letter
    // in the table
    output[pos++] = table[r][c];
    // move in the direction specified by the parameter
    switch (dir) { // assumes table[0][0] is in the upper-left
    case 0:
      r--;
      break; // north
    case 1:
      r--;
      c++;
      break; // north-east
    case 2:
      c++;
      break; // east
    case 3:
      r++;
      c++;
      break; // south-east
    case 4:
      r++;
      break; // south
    case 5:
      r++;
      c--;
      break; // south-west
    case 6:
      c--;
      break; // west
    case 7:
      r--;
      c--;
      break; // north-west
    }
  }
  // set the next character to zero (end-of-string)
  output[pos] = 0;
  // return the string (a C-style char* string, not a C++ string
  // object)
  return output;
}
